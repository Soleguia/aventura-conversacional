{"version":3,"sources":["context/StoryContext.js","components/StoryComponent.js","components/HistoryComponent.js","components/StoryNavigation.js","views/StoryView.js","App.js","reportWebVitals.js","index.js"],"names":["StoryContext","createContext","StoryContextProvider","children","useState","story","setStory","currentFragment","setCurrentFragment","Provider","value","StoryComponent","memo","props","Fragment","className","storyFragment","image","src","alt","parse","colette","HistoryComponent","history","map","h","console","log","answers","id","StoryNavigation","answer","onClick","sendData","passAnswer","fragment","StoryView","useContext","showFragment","setShowFragment","setHistory","useEffect","fetch","then","req","json","res","getShowFragment","newShow","fragments","current","find","Object","keys","length","historyFragment","a","storyRecord","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52f1366e.chunk.js","sourcesContent":["import React, { useState, createContext, useContext } from 'react'\r\n\r\nconst StoryContext = createContext({});\r\n\r\nconst StoryContextProvider = ({children}) => {\r\n    const [story, setStory] = useState([])\r\n    const [currentFragment, setCurrentFragment] = useState(0)\r\n\r\n    return (\r\n        <StoryContext.Provider value={{story, setStory, currentFragment, setCurrentFragment}}>\r\n            { children }\r\n        </StoryContext.Provider>\r\n    )\r\n}\r\n\r\nconst StoryContextState = () => {\r\n    const context = useContext(StoryContext)\r\n    if( !context ) {\r\n        throw new Error(\"Context? What Context?? What r'u' talkin' about???\")\r\n    }\r\n    return context;\r\n}\r\n\r\nexport { StoryContext, StoryContextProvider, StoryContextState }\r\n","import React, { memo } from 'react'\r\nimport parse from 'html-react-parser'\r\n\r\n// import styles from '../css/story-component.module.css'\r\n\r\nexport const StoryComponent = memo((props) => {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"storyFragment\">\r\n                {\r\n                    props.storyFragment?.image &&\r\n                        <figure className=\"image\">\r\n                            <img src={'images/'+props.storyFragment.image} alt=\"Illustration\" />\r\n                        </figure>\r\n                }   \r\n                <div className=\"storyLine storyLineColette\">{ props.storyFragment ? parse(props.storyFragment.colette) : 'Wait for it...' }</div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n})\r\n","import React, { memo } from 'react'\r\nimport { StoryComponent } from './StoryComponent'\r\n\r\n// import styles from '../css/story-component.module.css'\r\n\r\nconst HistoryComponent = memo((props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"storyHistory\">\r\n                <div className=\"historyFragments\">\r\n                {\r\n                    props.history.map( h => {\r\n                        console.log({h});\r\n                        return (\r\n                            <React.Fragment key={h.id}>\r\n                                <StoryComponent storyFragment={h}></StoryComponent>\r\n                                <div className=\"storyLine storyLineAnswer\">{h.answers.value}</div>\r\n                            </React.Fragment>\r\n                        )\r\n                    })\r\n                }\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n})\r\n\r\nexport default HistoryComponent","import React, { memo } from 'react'\r\n\r\n// import styles from '../css/story-component.module.css'\r\n\r\nexport const StoryNavigation = memo((props) => {\r\n    \r\n    const passAnswer = (answer) => {\r\n        props.sendData(answer)\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"answers\">\r\n                { \r\n                    props.answers && props.answers.map( answer => {\r\n                        return (<button \r\n                                    key={answer.fragment} \r\n                                    className=\"answer\" \r\n                                    onClick={() => passAnswer(answer)}\r\n                                >\r\n                                    {answer.value}\r\n                                </button>)\r\n                    })\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n})\r\n","import React, {useContext, useEffect, useState} from 'react'\r\nimport HistoryComponent from '../components/HistoryComponent'\r\nimport { StoryComponent } from '../components/StoryComponent'\r\nimport { StoryNavigation } from '../components/StoryNavigation'\r\nimport { StoryContext } from '../context/StoryContext'\r\n\r\n// import styles from '../css/story-component.module.css'\r\n\r\nexport const StoryView = () => {\r\n    \r\n    const { story, setStory, currentFragment, setCurrentFragment } =  useContext(StoryContext);\r\n    const [showFragment, setShowFragment] = useState(false)\r\n    const [history, setHistory] = useState([])\r\n\r\n    useEffect( () => {\r\n        fetch('./data/fragments.json')\r\n            .then( req => req.json() )\r\n            .then( res => {\r\n                setStory(res)\r\n                getShowFragment(res, currentFragment)\r\n            })\r\n    }, [])\r\n   \r\n    useEffect( () => {\r\n        let newShow = getShowFragment(story, currentFragment)\r\n        setShowFragment(newShow);\r\n    }, [story, currentFragment])\r\n\r\n    const getShowFragment = (fragments, current) => {\r\n        return fragments.find( fragment => fragment.id === current )\r\n    }\r\n    \r\n    const processAnswer = (answer) => {\r\n        if(answer.fragment === 'end' || answer.fragment === 0 ){\r\n            setHistory([])\r\n        } else {\r\n            let historyFragment = ({...showFragment, answers: showFragment.answers.find( a => a.fragment === answer.fragment)})\r\n            let storyRecord = [...history, historyFragment]\r\n            setHistory(storyRecord)\r\n        }\r\n        setCurrentFragment(answer.fragment)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"story\">\r\n                {\r\n                    Object.keys(history).length > 0 && (\r\n                        <HistoryComponent history={history}></HistoryComponent>\r\n                    )\r\n                }\r\n                <div className=\"storyCurrent\">\r\n                    {\r\n                        showFragment && (\r\n                            <>\r\n                                <StoryComponent storyFragment={showFragment}></StoryComponent>\r\n                                <StoryNavigation answers={showFragment.answers} sendData={processAnswer} ></StoryNavigation>\r\n                            </>\r\n                        )\r\n                    }    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport { StoryContextProvider } from './context/StoryContext';\r\nimport { StoryView } from './views/StoryView';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <StoryContextProvider>\r\n        <StoryView></StoryView>\r\n    </StoryContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}